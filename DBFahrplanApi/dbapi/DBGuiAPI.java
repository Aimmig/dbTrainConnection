package dbapi;

import static dbapi.DBApi.history;
import static dbapi.DBApi.stations;
import static dbapi.DBApi.stationID;
import static dbapi.DBApi.LAN;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
/**
 *
 * @author Andre Immig
 * @aimmig@students.uni-mainz.de
 */
public class DBGuiAPI extends JFrame {
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton arr;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JComboBox<String> comboDay;
    private javax.swing.JComboBox<String> comboHour;
    private javax.swing.JComboBox<String> comboMinute;
    private javax.swing.JComboBox<String> comboMonth;
    private javax.swing.JRadioButton dep;
    private javax.swing.JLabel detailInfoLabel;
    private javax.swing.JButton getConnections;
    private javax.swing.JButton getEarlier;
    private javax.swing.JButton getLater;
    private javax.swing.JButton getNow;
    private javax.swing.JButton getStation;
    private javax.swing.JList<String> infoList;
    private javax.swing.JScrollPane infoPane;
    private javax.swing.JTextField inp;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelStationBox;
    private javax.swing.JLabel labelTime;
    private javax.swing.JList<String> list;
    private javax.swing.JButton loadHistory;
    private javax.swing.JLabel mapLabel;
    private javax.swing.JButton next;
    private javax.swing.JScrollPane pane;
    private javax.swing.JButton previous;
    private javax.swing.JComboBox<String> railStation;
    private javax.swing.JButton saveHistory;
    // End of variables declaration//GEN-END:variables
    
    //selfcontrolled variables
    private final javax.swing.DefaultListModel listModel=new javax.swing.DefaultListModel<>();
    private final javax.swing.DefaultListModel infoListModel=new javax.swing.DefaultListModel<>();
    
    private final String[] minutes=new String[]{"00","01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", 
                                                "20","21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39",
                                                "40","41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"};
    
    private final String[] hours=new String[]{"00","01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", 
                                              "20","21", "22", "23"};
    
    private final String [] days=new String [] {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", 
                                                "20","21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"};
    
    private final String [] monthes=new String [] {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    
    private int prevLength;
    private int showIndex;
    private int selectedConnection;
    private int infoIndex;
    
    public static SimpleDateFormat dateFormat;
    
    //constructor for gui
    public DBGuiAPI() {
        DBGuiAPI.dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        //initialize counter variables
        showIndex=-1;
        selectedConnection=-1;
        infoIndex=-1;
        prevLength=-1;
        //pre-defined initializes components
        initComponents();
        //binds enter to getStation
        getRootPane().setDefaultButton(getStation);
        setVisible(true);
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        inputLabel = new javax.swing.JLabel();
        inp = new javax.swing.JTextField();
        getStation = new javax.swing.JButton();
        railStation = new javax.swing.JComboBox<>();
        labelDate = new javax.swing.JLabel();
        comboDay = new javax.swing.JComboBox<>(days);
        comboMonth = new javax.swing.JComboBox<>(monthes);
        labelTime = new javax.swing.JLabel();
        comboHour = new javax.swing.JComboBox<>(hours);
        comboMinute = new javax.swing.JComboBox<>(minutes);
        getConnections = new javax.swing.JButton();
        dep = new javax.swing.JRadioButton();
        arr = new javax.swing.JRadioButton();
        getNow = new javax.swing.JButton();
        saveHistory = new javax.swing.JButton();
        loadHistory = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        detailInfoLabel = new javax.swing.JLabel();
        infoPane = new javax.swing.JScrollPane();
        infoList = new javax.swing.JList<>(infoListModel);
        jPanel4 = new javax.swing.JPanel();
        pane = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>(listModel);
        getEarlier = new javax.swing.JButton();
        labelStationBox = new javax.swing.JLabel();
        getLater = new javax.swing.JButton();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        mapLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fahrplanauskunft");

        inputLabel.setText("Ort eingeben");
        inputLabel.setName("stationLabel"); // NOI18N

        getStation.setText("Bahnhof w√§hlen");
        getStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getStationActionPerformed(evt);
            }
        });

        labelDate.setText("Datum (Tag, Monat, akt Jahr)");

        labelTime.setText("Uhrzeit (Stunde,Minute)");

        getConnections.setText("Abfragen");
        getConnections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getConnectionsActionPerformed(evt);
            }
        });

        buttonGroup.add(dep);
        dep.setSelected(true);
        dep.setText("Abfahrt");

        buttonGroup.add(arr);
        arr.setText("Ankunft");

        getNow.setText("Jetzt");
        getNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getNowActionPerformed(evt);
            }
        });

        saveHistory.setText("Speichern");
        saveHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveHistoryActionPerformed(evt);
            }
        });

        loadHistory.setText("Laden");
        loadHistory.setActionCommand("");
        loadHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(railStation, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dep, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(loadHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(arr, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(getStation, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inp, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(getNow, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboHour, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getConnections, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(comboDay, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelTime)
                    .addComponent(inputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(inp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getStation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addComponent(railStation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelDate, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboDay)
                    .addComponent(comboMonth))
                .addGap(18, 18, 18)
                .addComponent(labelTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboHour)
                    .addComponent(comboMinute))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getConnections, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(getNow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(arr, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(dep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        infoPane.setPreferredSize(new java.awt.Dimension(150, 130));

        infoList.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        infoList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        infoList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                infoListKeyPressed(evt);
            }
        });
        infoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                infoListValueChanged(evt);
            }
        });
        infoPane.setViewportView(infoList);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(detailInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                        .addGap(3, 3, 3)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(detailInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infoPane, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addContainerGap())
        );

        list.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listKeyPressed(evt);
            }
        });
        list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listValueChanged(evt);
            }
        });
        pane.setViewportView(list);

        getEarlier.setText("Fr√ºher");
        getEarlier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getEarlierActionPerformed(evt);
            }
        });

        getLater.setText("Sp√§ter");
        getLater.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getLaterActionPerformed(evt);
            }
        });

        previous.setText("Zur√ºck");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        next.setText("Vorw√§rts");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(pane)
                        .addGap(12, 12, 12))
                    .addComponent(labelStationBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(next, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getEarlier, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(getLater, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                        .addGap(19, 19, 19))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(labelStationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previous, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(next, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(getEarlier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(getLater, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //reads input from reader and provides appropiate results
    private void getStationActionPerformed(java.awt.event.ActionEvent evt) {                                           
        //get station Information
        String [] locInp={inp.getText(),LAN};
        //dep or arrival unneccessary
        prevLength=stations.size();
        try{
            Information.getInformation(locInp,false);
        }
        catch(IOException ex){
            JOptionPane.showMessageDialog(DBApi.frame,"Es scheint keine Verbindung zum Internet zu bestehen","Netzwerk-Fehler",JOptionPane.ERROR_MESSAGE);
        }
        //reset combo Box
        railStation.removeAllItems();
        //add new entries to combo box
        for(int i=prevLength;i<stations.size();i++){
            railStation.addItem(stations.get(i));
        }
    }                                          
   
    //gets the the selected stations and the date information, retrieves possible connections and
    //shows them in JList
    private void getConnectionsActionPerformed(java.awt.event.ActionEvent evt) {                                               
       getConnections(false);
    }                                              
   
    //adding listSelectionListener
    private void listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listValueChanged
        if(evt.getValueIsAdjusting()){
            listSelected();
        }
    }//GEN-LAST:event_listValueChanged
    
    //choosing a connection displays a more detailed connection
    private void listSelected(){
        try{
            //get selected index
            int connectionIndex=list.getSelectedIndex();
            if(connectionIndex!=-1){
                //reset info List and coresponding label
                infoListModel.removeAllElements();
                detailInfoLabel.setText("");
                mapLabel.setIcon(null);
             
                //stop List is not available yet
                if(history.get(showIndex).getConArray()[connectionIndex].getStopList()==null){
                    //getting stops from url and adding it to history at index
                    Information.addStopsToList(mapLabel.getSize(),showIndex,connectionIndex,history.get(showIndex).getConnectionAtIndex(connectionIndex).getDetails());
                }    
                          
                //write stops to info List
                Connection temp= history.get(showIndex).getConArray() [connectionIndex];
                detailInfoLabel.setText(temp.toString());
                int formatLength=temp.getMaxStopNameLength();
                for(int i=0;i<temp.getStopList().size();i++){
                    infoListModel.addElement(temp.getStopList().get(i).toString(formatLength));  
                }
                ImageIcon icon=new ImageIcon((new ImageIcon(ImageIO.read(new ByteArrayInputStream(temp.getImage())))).getImage());
                mapLabel.setIcon(new ImageIcon(icon.getImage().getScaledInstance(mapLabel.getSize().width, mapLabel.getSize().height,Image.SCALE_DEFAULT)));
                //save changes to indices
                selectedConnection=connectionIndex;
                infoIndex=showIndex;
            }    
        }    
        catch(ParserConfigurationException | SAXException |java.lang.NullPointerException e){
            detailInfoLabel.setText("F√ºr diesen Zug ist der Zugverlauf aufgrund eines Fehlers leider momentan nicht verf√ºgbar :("); 
        }
        catch(IOException e){
            JOptionPane.showMessageDialog(DBApi.frame,"Es scheint keine Verbindung zum Internet zu bestehen","Netzwerk-Fehler",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //adding infoListSelectionListener
    private void infoListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_infoListValueChanged
        if(evt.getValueIsAdjusting()){
            infoListSelected();
        }
    }//GEN-LAST:event_infoListValueChanged

    //choosing a station and time from detailed connection info retrieves possible connections and shows them
    private void infoListSelected(){
        //get selected index
        int selection=infoList.getSelectedIndex();
        if(selection!=-1){
                
            boolean departure=true;
            String date;
            //reading from data
            ConnectionList c=history.get(infoIndex);
            Connection con=c.getConnectionAtIndex(selectedConnection);
            ArrayList<Stop> l=con.getStopList();
            Stop s=l.get(selection);
            String id=s.getId();
                
            //arrival
            if(arr.isSelected()){
                departure=false;
                //valid Departure Date/Time
                if(s.getDeparture()!=null){
                    date=s.getDeparture();
                }
                else{
                    date=s.getArrival();
                }
            }
            //departure
            else{
                //valid Arrival Date/Time
                if(s.getArrival()!=null){
                    date=s.getArrival();
                }
                else{
                    date=s.getDeparture();
                }
            }
            //sending request, getting information
            String [] input= new String [] {id,LAN,date};
            try{
                if(Information.getInformation(input,departure)){
               
                    //show Connections in List 
                    showConnectionsInList(history.size()-1);
                    String formatted=Formatter.formatDateForOutput(date);
                    setLabelText(formatted,s.getName(),departure);
                    //save changes to index
                    showIndex=history.size()-1;
                }
                else{
                    nothingFound();
                }
            }
            catch(IOException e){
                JOptionPane.showMessageDialog(DBApi.frame,"Es scheint keine Verbindung zum Internet zu bestehen","Netzwerk-Fehler",JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        //next exist and not the last is shown
        if(showIndex>-1 && showIndex<history.size()-1){
            showIndex++;
            labelStationBox.setText(history.get(showIndex).getLabelText());
            showConnectionsInList(showIndex);
        }
    }//GEN-LAST:event_nextActionPerformed

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        //previous exist and not first is shown
        if(showIndex>0 && showIndex<history.size()&& history.size()>1){
            showIndex--;
            labelStationBox.setText(history.get(showIndex).getLabelText());
            showConnectionsInList(showIndex);
        }
        if(showIndex>=history.size()&&history.size()>0&& labelStationBox.getText().equals(" Keine Abfahrten/Ank√ºnfte gefunden")){
            showIndex=history.size()-1;
            labelStationBox.setText(history.get(showIndex).getLabelText());
            showConnectionsInList(showIndex);
        }
    }//GEN-LAST:event_previousActionPerformed
    
    private void getConnections(boolean now){
        //get selected index
        int sel=railStation.getSelectedIndex();
        //check if something selected
        if (sel!=-1){
            //departure or arrival
            boolean departure=true;
            int length =history.size();
            if(arr.isSelected()){
                departure=false;
            }
            //get selected train station using HashMap
            String id=stationID.get(stations.get(prevLength+sel));
            
            String date;
            try{
                if(now){
                    date=dateFormat.format(new Date());
                }
                else{
                    //create Date from ComboBoxes
                    Calendar cal=new GregorianCalendar();
                    cal.setLenient(false);
                    cal.set(cal.get(Calendar.YEAR),comboMonth.getSelectedIndex(),comboDay.getSelectedIndex()+1,
                            comboHour.getSelectedIndex(),comboMinute.getSelectedIndex());
                    date=dateFormat.format(cal.getTime());
                }
                String [] dateInput={id,LAN,date};
                try{
                    if(Information.getInformation(dateInput,departure)){
                        //show connections in list
                        showConnectionsInList(length);
                        setLabelText(Formatter.formatDateForOutput(date),stations.get(prevLength+sel),departure);
                        showIndex=history.size()-1;
                    }
                    else{
                        nothingFound();
                    }
                }
                catch(IOException e){
                    JOptionPane.showMessageDialog(DBApi.frame,"Es scheint keine Verbindung zum Internet zu bestehen","Netzwerk-Fehler",JOptionPane.ERROR_MESSAGE);
                }
            }
            catch(java.lang.IllegalArgumentException e){
                    JOptionPane.showMessageDialog(this,"Ung√ºltiges Datum","Fehler",JOptionPane.ERROR_MESSAGE);
            }
            
        }    
        //Nothing selected
        else{
            JOptionPane.showMessageDialog(this,"Noch keine Station gew√§hlt","Fehler",JOptionPane.ERROR_MESSAGE);
        }
    }    
    
    private void getEarlierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getEarlierActionPerformed
        if(!listModel.isEmpty()){
            getConnectionAtShiftedTime(-3);
        }
        
    }//GEN-LAST:event_getEarlierActionPerformed

    private void getLaterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getLaterActionPerformed
        if(!listModel.isEmpty()){
           getConnectionAtShiftedTime(3);
        }
    }//GEN-LAST:event_getLaterActionPerformed

    //adding Listener for KeyBoard (Enter) navigation
    private void listKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            listSelected();
        }
    }//GEN-LAST:event_listKeyPressed

    //adding Listener for KeyBoard (Ente) navigation
    private void infoListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_infoListKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            infoListSelected();
        }
    }//GEN-LAST:event_infoListKeyPressed

    private File getFileFromFileChooser(){
        XMLFileChooser fc=new XMLFileChooser();
        while(fc.isFileXML().equals("")){
            JOptionPane.showMessageDialog(DBApi.frame,"Bitte eine XML datei ausw√§hlen","DateiFormat-Fehler",JOptionPane.ERROR_MESSAGE);
            fc=new XMLFileChooser(); 
        }
        return fc.getSelectedFile();
    }
    
    private void saveHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveHistoryActionPerformed
        File output=getFileFromFileChooser();
        XMLEncoder encoder = null;
        try {
            encoder=new XMLEncoder(new BufferedOutputStream(new FileOutputStream(output)));
        } catch (FileNotFoundException ex) {}
        encoder.writeObject(history);
        encoder.close();
    }//GEN-LAST:event_saveHistoryActionPerformed

    private void loadHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadHistoryActionPerformed
        File input=getFileFromFileChooser();
        XMLDecoder decoder=null;
        try{
            decoder=new XMLDecoder(new BufferedInputStream(new FileInputStream(input)));
        } catch (FileNotFoundException ex) {}
        history=(ArrayList<ConnectionList>) decoder.readObject();
        decoder.close();
        showIndex=0;
        showConnectionsInList(showIndex);
        labelStationBox.setText(history.get(showIndex).getLabelText());
        
    }//GEN-LAST:event_loadHistoryActionPerformed

    private void getNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getNowActionPerformed
        getConnections(true);
    }//GEN-LAST:event_getNowActionPerformed
//GEN-FIRST:event_getConnectionsActionPerformed
//GEN-LAST:event_getConnectionsActionPerformed
//GEN-FIRST:event_getStationActionPerformed
//GEN-LAST:event_getStationActionPerformed

    //adds given amount to first entry of dep/arrival table and request dep/arrival
    private void getConnectionAtShiftedTime(int hourShift){
        try {
            String shifted=Formatter.addHoursToCalendar(Formatter.getFormattedDate(showIndex),hourShift);
            String id=history.get(showIndex).getConArray()[0].getStopID();
            boolean departure=dep.isSelected();
            String [] input=new String [] {id,LAN,shifted};
            try{
                if(Information.getInformation(input, departure)){
                    //show Connections in List 
                    showConnectionsInList(history.size()-1);
                    String name=history.get(showIndex).getConArray()[0].getStop();
                    String formatted=Formatter.formatDateForOutput(shifted);
                    setLabelText(formatted,name,departure);
                    //save changes to index
                    showIndex=history.size()-1;
                }
                else{
                    nothingFound();
                }
            }
            catch(IOException e){
                JOptionPane.showMessageDialog(DBApi.frame,"Es scheint keine Verbindung zum Internet zu bestehen","Netzwerk-Fehler",JOptionPane.ERROR_MESSAGE);
            }
        } 
        catch(ParseException ex) {}
    }
    
    private void setLabelText(String date,String name, boolean departure){
        if(!departure){
            history.get(history.size()-1).setLabelText(" Ankunfts-Tafel f√ºr "+ name+ " am "+date);
            labelStationBox.setText(" Ankunfts-Tafel f√ºr "+ name+ " am "+date);
        }
        else{
            history.get(history.size()-1).setLabelText(" Abfahrts-Tafel f√ºr "+name+ " am "+date);
            labelStationBox.setText(" Abfahrts-Tafel f√ºr "+name+ " am "+date);
        }
    }
    
    //index for arrayList shows connection in List without label
    private void showConnectionsInList(int arrayListIndex){
        try{
            //delete list
            listModel.removeAllElements();
                        
            Connection [] temp;
            int maxNameLength;
            
            //reading data
            temp=history.get(arrayListIndex).getConArray();
            maxNameLength=history.get(arrayListIndex).getMaxNameLength();
            int maxDirectionLength=history.get(arrayListIndex).getMaxStopLength();
            
            //add new elements to list
            for (Connection temp1 : temp) {
                listModel.addElement(temp1.toString(maxNameLength, maxDirectionLength));
            }
        }
        //no information found
        catch(java.lang.NullPointerException| java.lang.IndexOutOfBoundsException e){
            labelStationBox.setText(" Keine Abfahrten/Ank√ºnfte gefunden");
        }
    }
    
    private void nothingFound(){
        showIndex++;
        labelStationBox.setText(" Keine Abfahrten/Ank√ºnfte gefunden");
        listModel.removeAllElements();
        infoListModel.removeAllElements();
        detailInfoLabel.setText("");
    }
}
